from phi.agent import Agent, RunResponse
from phi.model.groq import Groq 
from phi.tools.yfinance import YFinanceTools
from phi.tools.duckduckgo import DuckDuckGo
import os 
import openai 
from dotenv import load_dotenv
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")


# First create the different agents that are needed for the use case

web_search_agent = Agent(
    name = "Web Search Agent",
    role = "Search the web for information",
    model=Groq(id ="llama3-8b-8192"),
    tools = [DuckDuckGo()],
    instructions =["Always include source"],
    show_tools_calls = True,
    markdown = True, 
)

# Financial agent that can use the YFinance tools to get stock data
financial_agent = Agent(
    name = "Financial AI Agent",
    role = "Interact with financial data and provide insights",
    model = Groq(id="llama3-8b-8192"),
    tools = [
        YFinanceTools(stock_price=True, analyst_recommendations=True, stock_fundamentals=True, company_news=True),
    ],
    instructions = ["Use tables to display the data"],
    show_tools_calls = True,
    markdown = True,
)

# Defining the workflow 

multi_ai_agent = Agent(
    team = [web_search_agent, financial_agent],
    instructions = ["Always include sources", "Use tables to display the data"],
    show_tools_calls = True,
    markdown = True,
    name = "Multi AI Agent",
    role = "A multi-agent system that can search the web and provide financial insights",
)

multi_ai_agent.print_response("Summarize analyst recommendation and share the latest news for APPL", stream=True)
